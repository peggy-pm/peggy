name: rust-ci

on:
    push:
        branches:
            - main
            - staging
            - trying

env:
    CARGO_TERM_COLOR: always
    RUSTFLAGS: -D warnings

jobs:
    build-actions-bot:
        strategy:
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly]
                mode: [release, debug]
        name: cargo-build ${{ matrix.os }}-${{ matrix.toolchain}} ${{ matrix.mode }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2

            - name: set compile mode
              shell: bash
              run: |
                  if [ ${{matrix.mode}} = "release" ] ; then
                    echo "MODE=--release" >> $GITHUB_ENV
                  fi
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.toolchain }}
                  override: true
            - uses: actions-rs/cargo@v1
              with:
                  command: build
                  args: ${{ env.MODE }} --verbose
    build-frontend:
        defaults:
            run:
                working-directory: frontend/
        strategy:
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly]
                mode: [release, debug]
        env:
            NODE_ENV: "production"
        name: trunk-build ${{ matrix.os }}-${{ matrix.toolchain}} ${{ matrix.mode }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2
            - name: set compile mode
              shell: bash
              run: |
                  if [ ${{matrix.mode}} = "release" ] ; then
                    echo "MODE=--release" >> $GITHUB_ENV
                  fi
            - name: Setup Node.js environment
              uses: actions/setup-node@v3.4.1
              with:
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json
                  node-version: 16
            - run: npm install -g tailwindcss
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.toolchain }}
                  target: wasm32-unknown-unknown
                  override: true
            - uses: actions-rs/install@v0.1
              with:
                  crate: trunk
                  version: latest
                  use-tool-cache: true
            - name: trunk build
              run: trunk build ${{ env.MODE }}
    doc:
        strategy:
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly]
                mode: [release, debug]
        name: cargo-doc ${{ matrix.os }}-${{ matrix.toolchain }} ${{ matrix.mode }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2

            - name: set compile mode
              shell: bash
              run: |
                  if [ ${{ matrix.mode }} = "release" ] ; then
                    echo "MODE=--release" >> $GITHUB_ENV
                  fi
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.toolchain }}
                  override: true
            - uses: actions-rs/cargo@v1
              with:
                  command: doc
                  args: ${{ env.MODE }} --verbose
    test:
        strategy:
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly]
                mode: [release, debug]
        name: cargo-test ${{ matrix.os }}-${{ matrix.toolchain}} ${{ matrix.mode }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2

            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.toolchain }}
                  override: true

            - uses: actions-rs/cargo@v1
              with:
                  command: test
                  args: ${{ env.MODE }} --verbose
    fmt:
        name: cargo-fmt
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: nightly
                  override: true
                  components: rustfmt

            - uses: actions-rs/cargo@v1
              with:
                  command: fmt
                  args: --all --verbose -- --check
    clippy:
        strategy:
            matrix:
                os: [ubuntu-latest]
                toolchain: [nightly]
                mode: [release, debug]
        name: cargo-clippy
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2

            - name: set compile mode
              shell: bash
              run: |
                  if [ ${{matrix.mode}} = "release" ] ; then
                    echo "MODE=--release" >> $GITHUB_ENV
                  fi
            - uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: nightly
                  components: clippy
                  override: true
            - uses: actions-rs/clippy-check@v1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  args: ${{ env.MODE }} --verbose
    rust-ci-done:
        needs:
            - build-actions-bot
            - build-frontend
            - doc
            - test
            - fmt
            - clippy
        runs-on: ubuntu-latest
        steps:
            - name: rust-ci succeeded
              run: exit 0
